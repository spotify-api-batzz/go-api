// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TopArtistDatum is an object representing the database table.
type TopArtistDatum struct {
	ID          string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	ArtistID    null.String `boil:"artist_id" json:"artist_id,omitempty" toml:"artist_id" yaml:"artist_id,omitempty"`
	TopArtistID null.String `boil:"top_artist_id" json:"top_artist_id,omitempty" toml:"top_artist_id" yaml:"top_artist_id,omitempty"`
	TimePeriod  null.String `boil:"time_period" json:"time_period,omitempty" toml:"time_period" yaml:"time_period,omitempty"`
	Order       null.Int    `boil:"order" json:"order,omitempty" toml:"order" yaml:"order,omitempty"`
	CreatedAt   null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt   null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *topArtistDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L topArtistDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TopArtistDatumColumns = struct {
	ID          string
	ArtistID    string
	TopArtistID string
	TimePeriod  string
	Order       string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "id",
	ArtistID:    "artist_id",
	TopArtistID: "top_artist_id",
	TimePeriod:  "time_period",
	Order:       "order",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var TopArtistDatumWhere = struct {
	ID          whereHelperstring
	ArtistID    whereHelpernull_String
	TopArtistID whereHelpernull_String
	TimePeriod  whereHelpernull_String
	Order       whereHelpernull_Int
	CreatedAt   whereHelpernull_Time
	UpdatedAt   whereHelpernull_Time
}{
	ID:          whereHelperstring{field: "\"top_artist_data\".\"id\""},
	ArtistID:    whereHelpernull_String{field: "\"top_artist_data\".\"artist_id\""},
	TopArtistID: whereHelpernull_String{field: "\"top_artist_data\".\"top_artist_id\""},
	TimePeriod:  whereHelpernull_String{field: "\"top_artist_data\".\"time_period\""},
	Order:       whereHelpernull_Int{field: "\"top_artist_data\".\"order\""},
	CreatedAt:   whereHelpernull_Time{field: "\"top_artist_data\".\"created_at\""},
	UpdatedAt:   whereHelpernull_Time{field: "\"top_artist_data\".\"updated_at\""},
}

// TopArtistDatumRels is where relationship names are stored.
var TopArtistDatumRels = struct {
}{}

// topArtistDatumR is where relationships are stored.
type topArtistDatumR struct {
}

// NewStruct creates a new relationship struct
func (*topArtistDatumR) NewStruct() *topArtistDatumR {
	return &topArtistDatumR{}
}

// topArtistDatumL is where Load methods for each relationship are stored.
type topArtistDatumL struct{}

var (
	topArtistDatumAllColumns            = []string{"id", "artist_id", "top_artist_id", "time_period", "order", "created_at", "updated_at"}
	topArtistDatumColumnsWithoutDefault = []string{"id", "artist_id", "top_artist_id", "time_period", "order", "created_at", "updated_at"}
	topArtistDatumColumnsWithDefault    = []string{}
	topArtistDatumPrimaryKeyColumns     = []string{"id"}
)

type (
	// TopArtistDatumSlice is an alias for a slice of pointers to TopArtistDatum.
	// This should generally be used opposed to []TopArtistDatum.
	TopArtistDatumSlice []*TopArtistDatum
	// TopArtistDatumHook is the signature for custom TopArtistDatum hook methods
	TopArtistDatumHook func(context.Context, boil.ContextExecutor, *TopArtistDatum) error

	topArtistDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	topArtistDatumType                 = reflect.TypeOf(&TopArtistDatum{})
	topArtistDatumMapping              = queries.MakeStructMapping(topArtistDatumType)
	topArtistDatumPrimaryKeyMapping, _ = queries.BindMapping(topArtistDatumType, topArtistDatumMapping, topArtistDatumPrimaryKeyColumns)
	topArtistDatumInsertCacheMut       sync.RWMutex
	topArtistDatumInsertCache          = make(map[string]insertCache)
	topArtistDatumUpdateCacheMut       sync.RWMutex
	topArtistDatumUpdateCache          = make(map[string]updateCache)
	topArtistDatumUpsertCacheMut       sync.RWMutex
	topArtistDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var topArtistDatumBeforeInsertHooks []TopArtistDatumHook
var topArtistDatumBeforeUpdateHooks []TopArtistDatumHook
var topArtistDatumBeforeDeleteHooks []TopArtistDatumHook
var topArtistDatumBeforeUpsertHooks []TopArtistDatumHook

var topArtistDatumAfterInsertHooks []TopArtistDatumHook
var topArtistDatumAfterSelectHooks []TopArtistDatumHook
var topArtistDatumAfterUpdateHooks []TopArtistDatumHook
var topArtistDatumAfterDeleteHooks []TopArtistDatumHook
var topArtistDatumAfterUpsertHooks []TopArtistDatumHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TopArtistDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range topArtistDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TopArtistDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range topArtistDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TopArtistDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range topArtistDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TopArtistDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range topArtistDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TopArtistDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range topArtistDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TopArtistDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range topArtistDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TopArtistDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range topArtistDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TopArtistDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range topArtistDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TopArtistDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range topArtistDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTopArtistDatumHook registers your hook function for all future operations.
func AddTopArtistDatumHook(hookPoint boil.HookPoint, topArtistDatumHook TopArtistDatumHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		topArtistDatumBeforeInsertHooks = append(topArtistDatumBeforeInsertHooks, topArtistDatumHook)
	case boil.BeforeUpdateHook:
		topArtistDatumBeforeUpdateHooks = append(topArtistDatumBeforeUpdateHooks, topArtistDatumHook)
	case boil.BeforeDeleteHook:
		topArtistDatumBeforeDeleteHooks = append(topArtistDatumBeforeDeleteHooks, topArtistDatumHook)
	case boil.BeforeUpsertHook:
		topArtistDatumBeforeUpsertHooks = append(topArtistDatumBeforeUpsertHooks, topArtistDatumHook)
	case boil.AfterInsertHook:
		topArtistDatumAfterInsertHooks = append(topArtistDatumAfterInsertHooks, topArtistDatumHook)
	case boil.AfterSelectHook:
		topArtistDatumAfterSelectHooks = append(topArtistDatumAfterSelectHooks, topArtistDatumHook)
	case boil.AfterUpdateHook:
		topArtistDatumAfterUpdateHooks = append(topArtistDatumAfterUpdateHooks, topArtistDatumHook)
	case boil.AfterDeleteHook:
		topArtistDatumAfterDeleteHooks = append(topArtistDatumAfterDeleteHooks, topArtistDatumHook)
	case boil.AfterUpsertHook:
		topArtistDatumAfterUpsertHooks = append(topArtistDatumAfterUpsertHooks, topArtistDatumHook)
	}
}

// One returns a single topArtistDatum record from the query.
func (q topArtistDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TopArtistDatum, error) {
	o := &TopArtistDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for top_artist_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TopArtistDatum records from the query.
func (q topArtistDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (TopArtistDatumSlice, error) {
	var o []*TopArtistDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TopArtistDatum slice")
	}

	if len(topArtistDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TopArtistDatum records in the query.
func (q topArtistDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count top_artist_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q topArtistDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if top_artist_data exists")
	}

	return count > 0, nil
}

// TopArtistData retrieves all the records using an executor.
func TopArtistData(mods ...qm.QueryMod) topArtistDatumQuery {
	mods = append(mods, qm.From("\"top_artist_data\""))
	return topArtistDatumQuery{NewQuery(mods...)}
}

// FindTopArtistDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTopArtistDatum(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*TopArtistDatum, error) {
	topArtistDatumObj := &TopArtistDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"top_artist_data\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, topArtistDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from top_artist_data")
	}

	return topArtistDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TopArtistDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no top_artist_data provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(topArtistDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	topArtistDatumInsertCacheMut.RLock()
	cache, cached := topArtistDatumInsertCache[key]
	topArtistDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			topArtistDatumAllColumns,
			topArtistDatumColumnsWithDefault,
			topArtistDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(topArtistDatumType, topArtistDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(topArtistDatumType, topArtistDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"top_artist_data\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"top_artist_data\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into top_artist_data")
	}

	if !cached {
		topArtistDatumInsertCacheMut.Lock()
		topArtistDatumInsertCache[key] = cache
		topArtistDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TopArtistDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TopArtistDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	topArtistDatumUpdateCacheMut.RLock()
	cache, cached := topArtistDatumUpdateCache[key]
	topArtistDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			topArtistDatumAllColumns,
			topArtistDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update top_artist_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"top_artist_data\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, topArtistDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(topArtistDatumType, topArtistDatumMapping, append(wl, topArtistDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update top_artist_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for top_artist_data")
	}

	if !cached {
		topArtistDatumUpdateCacheMut.Lock()
		topArtistDatumUpdateCache[key] = cache
		topArtistDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q topArtistDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for top_artist_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for top_artist_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TopArtistDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), topArtistDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"top_artist_data\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, topArtistDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in topArtistDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all topArtistDatum")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TopArtistDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no top_artist_data provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(topArtistDatumColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	topArtistDatumUpsertCacheMut.RLock()
	cache, cached := topArtistDatumUpsertCache[key]
	topArtistDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			topArtistDatumAllColumns,
			topArtistDatumColumnsWithDefault,
			topArtistDatumColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			topArtistDatumAllColumns,
			topArtistDatumPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert top_artist_data, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(topArtistDatumPrimaryKeyColumns))
			copy(conflict, topArtistDatumPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"top_artist_data\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(topArtistDatumType, topArtistDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(topArtistDatumType, topArtistDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert top_artist_data")
	}

	if !cached {
		topArtistDatumUpsertCacheMut.Lock()
		topArtistDatumUpsertCache[key] = cache
		topArtistDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TopArtistDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TopArtistDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TopArtistDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), topArtistDatumPrimaryKeyMapping)
	sql := "DELETE FROM \"top_artist_data\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from top_artist_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for top_artist_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q topArtistDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no topArtistDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from top_artist_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for top_artist_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TopArtistDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(topArtistDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), topArtistDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"top_artist_data\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, topArtistDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from topArtistDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for top_artist_data")
	}

	if len(topArtistDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TopArtistDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTopArtistDatum(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TopArtistDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TopArtistDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), topArtistDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"top_artist_data\".* FROM \"top_artist_data\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, topArtistDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TopArtistDatumSlice")
	}

	*o = slice

	return nil
}

// TopArtistDatumExists checks if the TopArtistDatum row exists.
func TopArtistDatumExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"top_artist_data\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if top_artist_data exists")
	}

	return exists, nil
}
