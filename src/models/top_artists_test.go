// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTopArtists(t *testing.T) {
	t.Parallel()

	query := TopArtists()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTopArtistsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopArtist{}
	if err = randomize.Struct(seed, o, topArtistDBTypes, true, topArtistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopArtist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TopArtists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTopArtistsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopArtist{}
	if err = randomize.Struct(seed, o, topArtistDBTypes, true, topArtistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopArtist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := TopArtists().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TopArtists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTopArtistsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopArtist{}
	if err = randomize.Struct(seed, o, topArtistDBTypes, true, topArtistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopArtist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TopArtistSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TopArtists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTopArtistsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopArtist{}
	if err = randomize.Struct(seed, o, topArtistDBTypes, true, topArtistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopArtist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TopArtistExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if TopArtist exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TopArtistExists to return true, but got false.")
	}
}

func testTopArtistsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopArtist{}
	if err = randomize.Struct(seed, o, topArtistDBTypes, true, topArtistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopArtist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	topArtistFound, err := FindTopArtist(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if topArtistFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTopArtistsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopArtist{}
	if err = randomize.Struct(seed, o, topArtistDBTypes, true, topArtistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopArtist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = TopArtists().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTopArtistsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopArtist{}
	if err = randomize.Struct(seed, o, topArtistDBTypes, true, topArtistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopArtist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := TopArtists().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTopArtistsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	topArtistOne := &TopArtist{}
	topArtistTwo := &TopArtist{}
	if err = randomize.Struct(seed, topArtistOne, topArtistDBTypes, false, topArtistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopArtist struct: %s", err)
	}
	if err = randomize.Struct(seed, topArtistTwo, topArtistDBTypes, false, topArtistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopArtist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = topArtistOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = topArtistTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TopArtists().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTopArtistsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	topArtistOne := &TopArtist{}
	topArtistTwo := &TopArtist{}
	if err = randomize.Struct(seed, topArtistOne, topArtistDBTypes, false, topArtistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopArtist struct: %s", err)
	}
	if err = randomize.Struct(seed, topArtistTwo, topArtistDBTypes, false, topArtistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopArtist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = topArtistOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = topArtistTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TopArtists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func topArtistBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *TopArtist) error {
	*o = TopArtist{}
	return nil
}

func topArtistAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *TopArtist) error {
	*o = TopArtist{}
	return nil
}

func topArtistAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *TopArtist) error {
	*o = TopArtist{}
	return nil
}

func topArtistBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TopArtist) error {
	*o = TopArtist{}
	return nil
}

func topArtistAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TopArtist) error {
	*o = TopArtist{}
	return nil
}

func topArtistBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TopArtist) error {
	*o = TopArtist{}
	return nil
}

func topArtistAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TopArtist) error {
	*o = TopArtist{}
	return nil
}

func topArtistBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TopArtist) error {
	*o = TopArtist{}
	return nil
}

func topArtistAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TopArtist) error {
	*o = TopArtist{}
	return nil
}

func testTopArtistsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &TopArtist{}
	o := &TopArtist{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, topArtistDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TopArtist object: %s", err)
	}

	AddTopArtistHook(boil.BeforeInsertHook, topArtistBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	topArtistBeforeInsertHooks = []TopArtistHook{}

	AddTopArtistHook(boil.AfterInsertHook, topArtistAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	topArtistAfterInsertHooks = []TopArtistHook{}

	AddTopArtistHook(boil.AfterSelectHook, topArtistAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	topArtistAfterSelectHooks = []TopArtistHook{}

	AddTopArtistHook(boil.BeforeUpdateHook, topArtistBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	topArtistBeforeUpdateHooks = []TopArtistHook{}

	AddTopArtistHook(boil.AfterUpdateHook, topArtistAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	topArtistAfterUpdateHooks = []TopArtistHook{}

	AddTopArtistHook(boil.BeforeDeleteHook, topArtistBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	topArtistBeforeDeleteHooks = []TopArtistHook{}

	AddTopArtistHook(boil.AfterDeleteHook, topArtistAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	topArtistAfterDeleteHooks = []TopArtistHook{}

	AddTopArtistHook(boil.BeforeUpsertHook, topArtistBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	topArtistBeforeUpsertHooks = []TopArtistHook{}

	AddTopArtistHook(boil.AfterUpsertHook, topArtistAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	topArtistAfterUpsertHooks = []TopArtistHook{}
}

func testTopArtistsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopArtist{}
	if err = randomize.Struct(seed, o, topArtistDBTypes, true, topArtistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopArtist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TopArtists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTopArtistsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopArtist{}
	if err = randomize.Struct(seed, o, topArtistDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TopArtist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(topArtistColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := TopArtists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTopArtistsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopArtist{}
	if err = randomize.Struct(seed, o, topArtistDBTypes, true, topArtistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopArtist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTopArtistsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopArtist{}
	if err = randomize.Struct(seed, o, topArtistDBTypes, true, topArtistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopArtist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TopArtistSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTopArtistsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopArtist{}
	if err = randomize.Struct(seed, o, topArtistDBTypes, true, topArtistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopArtist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TopArtists().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	topArtistDBTypes = map[string]string{`ID`: `text`, `UserID`: `text`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`}
	_                = bytes.MinRead
)

func testTopArtistsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(topArtistPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(topArtistAllColumns) == len(topArtistPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TopArtist{}
	if err = randomize.Struct(seed, o, topArtistDBTypes, true, topArtistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopArtist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TopArtists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, topArtistDBTypes, true, topArtistPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TopArtist struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTopArtistsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(topArtistAllColumns) == len(topArtistPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TopArtist{}
	if err = randomize.Struct(seed, o, topArtistDBTypes, true, topArtistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopArtist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TopArtists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, topArtistDBTypes, true, topArtistPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TopArtist struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(topArtistAllColumns, topArtistPrimaryKeyColumns) {
		fields = topArtistAllColumns
	} else {
		fields = strmangle.SetComplement(
			topArtistAllColumns,
			topArtistPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TopArtistSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTopArtistsUpsert(t *testing.T) {
	t.Parallel()

	if len(topArtistAllColumns) == len(topArtistPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := TopArtist{}
	if err = randomize.Struct(seed, &o, topArtistDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TopArtist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TopArtist: %s", err)
	}

	count, err := TopArtists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, topArtistDBTypes, false, topArtistPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TopArtist struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TopArtist: %s", err)
	}

	count, err = TopArtists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
