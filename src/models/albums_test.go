// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAlbums(t *testing.T) {
	t.Parallel()

	query := Albums()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAlbumsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Album{}
	if err = randomize.Struct(seed, o, albumDBTypes, true, albumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Album struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Albums().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAlbumsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Album{}
	if err = randomize.Struct(seed, o, albumDBTypes, true, albumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Album struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Albums().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Albums().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAlbumsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Album{}
	if err = randomize.Struct(seed, o, albumDBTypes, true, albumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Album struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AlbumSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Albums().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAlbumsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Album{}
	if err = randomize.Struct(seed, o, albumDBTypes, true, albumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Album struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AlbumExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Album exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AlbumExists to return true, but got false.")
	}
}

func testAlbumsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Album{}
	if err = randomize.Struct(seed, o, albumDBTypes, true, albumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Album struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	albumFound, err := FindAlbum(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if albumFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAlbumsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Album{}
	if err = randomize.Struct(seed, o, albumDBTypes, true, albumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Album struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Albums().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAlbumsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Album{}
	if err = randomize.Struct(seed, o, albumDBTypes, true, albumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Album struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Albums().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAlbumsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	albumOne := &Album{}
	albumTwo := &Album{}
	if err = randomize.Struct(seed, albumOne, albumDBTypes, false, albumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Album struct: %s", err)
	}
	if err = randomize.Struct(seed, albumTwo, albumDBTypes, false, albumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Album struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = albumOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = albumTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Albums().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAlbumsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	albumOne := &Album{}
	albumTwo := &Album{}
	if err = randomize.Struct(seed, albumOne, albumDBTypes, false, albumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Album struct: %s", err)
	}
	if err = randomize.Struct(seed, albumTwo, albumDBTypes, false, albumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Album struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = albumOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = albumTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Albums().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func albumBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Album) error {
	*o = Album{}
	return nil
}

func albumAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Album) error {
	*o = Album{}
	return nil
}

func albumAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Album) error {
	*o = Album{}
	return nil
}

func albumBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Album) error {
	*o = Album{}
	return nil
}

func albumAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Album) error {
	*o = Album{}
	return nil
}

func albumBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Album) error {
	*o = Album{}
	return nil
}

func albumAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Album) error {
	*o = Album{}
	return nil
}

func albumBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Album) error {
	*o = Album{}
	return nil
}

func albumAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Album) error {
	*o = Album{}
	return nil
}

func testAlbumsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Album{}
	o := &Album{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, albumDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Album object: %s", err)
	}

	AddAlbumHook(boil.BeforeInsertHook, albumBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	albumBeforeInsertHooks = []AlbumHook{}

	AddAlbumHook(boil.AfterInsertHook, albumAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	albumAfterInsertHooks = []AlbumHook{}

	AddAlbumHook(boil.AfterSelectHook, albumAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	albumAfterSelectHooks = []AlbumHook{}

	AddAlbumHook(boil.BeforeUpdateHook, albumBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	albumBeforeUpdateHooks = []AlbumHook{}

	AddAlbumHook(boil.AfterUpdateHook, albumAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	albumAfterUpdateHooks = []AlbumHook{}

	AddAlbumHook(boil.BeforeDeleteHook, albumBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	albumBeforeDeleteHooks = []AlbumHook{}

	AddAlbumHook(boil.AfterDeleteHook, albumAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	albumAfterDeleteHooks = []AlbumHook{}

	AddAlbumHook(boil.BeforeUpsertHook, albumBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	albumBeforeUpsertHooks = []AlbumHook{}

	AddAlbumHook(boil.AfterUpsertHook, albumAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	albumAfterUpsertHooks = []AlbumHook{}
}

func testAlbumsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Album{}
	if err = randomize.Struct(seed, o, albumDBTypes, true, albumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Album struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Albums().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAlbumsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Album{}
	if err = randomize.Struct(seed, o, albumDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Album struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(albumColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Albums().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAlbumsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Album{}
	if err = randomize.Struct(seed, o, albumDBTypes, true, albumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Album struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAlbumsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Album{}
	if err = randomize.Struct(seed, o, albumDBTypes, true, albumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Album struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AlbumSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAlbumsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Album{}
	if err = randomize.Struct(seed, o, albumDBTypes, true, albumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Album struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Albums().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	albumDBTypes = map[string]string{`ID`: `text`, `Name`: `text`, `SpotifyID`: `text`, `ArtistID`: `text`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`}
	_            = bytes.MinRead
)

func testAlbumsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(albumPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(albumAllColumns) == len(albumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Album{}
	if err = randomize.Struct(seed, o, albumDBTypes, true, albumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Album struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Albums().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, albumDBTypes, true, albumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Album struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAlbumsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(albumAllColumns) == len(albumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Album{}
	if err = randomize.Struct(seed, o, albumDBTypes, true, albumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Album struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Albums().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, albumDBTypes, true, albumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Album struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(albumAllColumns, albumPrimaryKeyColumns) {
		fields = albumAllColumns
	} else {
		fields = strmangle.SetComplement(
			albumAllColumns,
			albumPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AlbumSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAlbumsUpsert(t *testing.T) {
	t.Parallel()

	if len(albumAllColumns) == len(albumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Album{}
	if err = randomize.Struct(seed, &o, albumDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Album struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Album: %s", err)
	}

	count, err := Albums().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, albumDBTypes, false, albumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Album struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Album: %s", err)
	}

	count, err = Albums().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
