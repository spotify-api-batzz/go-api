// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTopSongs(t *testing.T) {
	t.Parallel()

	query := TopSongs()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTopSongsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopSong{}
	if err = randomize.Struct(seed, o, topSongDBTypes, true, topSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopSong struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TopSongs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTopSongsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopSong{}
	if err = randomize.Struct(seed, o, topSongDBTypes, true, topSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopSong struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := TopSongs().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TopSongs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTopSongsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopSong{}
	if err = randomize.Struct(seed, o, topSongDBTypes, true, topSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopSong struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TopSongSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TopSongs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTopSongsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopSong{}
	if err = randomize.Struct(seed, o, topSongDBTypes, true, topSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopSong struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TopSongExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if TopSong exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TopSongExists to return true, but got false.")
	}
}

func testTopSongsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopSong{}
	if err = randomize.Struct(seed, o, topSongDBTypes, true, topSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopSong struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	topSongFound, err := FindTopSong(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if topSongFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTopSongsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopSong{}
	if err = randomize.Struct(seed, o, topSongDBTypes, true, topSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopSong struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = TopSongs().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTopSongsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopSong{}
	if err = randomize.Struct(seed, o, topSongDBTypes, true, topSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopSong struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := TopSongs().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTopSongsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	topSongOne := &TopSong{}
	topSongTwo := &TopSong{}
	if err = randomize.Struct(seed, topSongOne, topSongDBTypes, false, topSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopSong struct: %s", err)
	}
	if err = randomize.Struct(seed, topSongTwo, topSongDBTypes, false, topSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopSong struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = topSongOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = topSongTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TopSongs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTopSongsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	topSongOne := &TopSong{}
	topSongTwo := &TopSong{}
	if err = randomize.Struct(seed, topSongOne, topSongDBTypes, false, topSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopSong struct: %s", err)
	}
	if err = randomize.Struct(seed, topSongTwo, topSongDBTypes, false, topSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopSong struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = topSongOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = topSongTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TopSongs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func topSongBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *TopSong) error {
	*o = TopSong{}
	return nil
}

func topSongAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *TopSong) error {
	*o = TopSong{}
	return nil
}

func topSongAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *TopSong) error {
	*o = TopSong{}
	return nil
}

func topSongBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TopSong) error {
	*o = TopSong{}
	return nil
}

func topSongAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TopSong) error {
	*o = TopSong{}
	return nil
}

func topSongBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TopSong) error {
	*o = TopSong{}
	return nil
}

func topSongAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TopSong) error {
	*o = TopSong{}
	return nil
}

func topSongBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TopSong) error {
	*o = TopSong{}
	return nil
}

func topSongAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TopSong) error {
	*o = TopSong{}
	return nil
}

func testTopSongsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &TopSong{}
	o := &TopSong{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, topSongDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TopSong object: %s", err)
	}

	AddTopSongHook(boil.BeforeInsertHook, topSongBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	topSongBeforeInsertHooks = []TopSongHook{}

	AddTopSongHook(boil.AfterInsertHook, topSongAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	topSongAfterInsertHooks = []TopSongHook{}

	AddTopSongHook(boil.AfterSelectHook, topSongAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	topSongAfterSelectHooks = []TopSongHook{}

	AddTopSongHook(boil.BeforeUpdateHook, topSongBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	topSongBeforeUpdateHooks = []TopSongHook{}

	AddTopSongHook(boil.AfterUpdateHook, topSongAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	topSongAfterUpdateHooks = []TopSongHook{}

	AddTopSongHook(boil.BeforeDeleteHook, topSongBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	topSongBeforeDeleteHooks = []TopSongHook{}

	AddTopSongHook(boil.AfterDeleteHook, topSongAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	topSongAfterDeleteHooks = []TopSongHook{}

	AddTopSongHook(boil.BeforeUpsertHook, topSongBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	topSongBeforeUpsertHooks = []TopSongHook{}

	AddTopSongHook(boil.AfterUpsertHook, topSongAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	topSongAfterUpsertHooks = []TopSongHook{}
}

func testTopSongsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopSong{}
	if err = randomize.Struct(seed, o, topSongDBTypes, true, topSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopSong struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TopSongs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTopSongsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopSong{}
	if err = randomize.Struct(seed, o, topSongDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TopSong struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(topSongColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := TopSongs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTopSongsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopSong{}
	if err = randomize.Struct(seed, o, topSongDBTypes, true, topSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopSong struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTopSongsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopSong{}
	if err = randomize.Struct(seed, o, topSongDBTypes, true, topSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopSong struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TopSongSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTopSongsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopSong{}
	if err = randomize.Struct(seed, o, topSongDBTypes, true, topSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopSong struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TopSongs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	topSongDBTypes = map[string]string{`ID`: `text`, `UserID`: `text`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`}
	_              = bytes.MinRead
)

func testTopSongsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(topSongPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(topSongAllColumns) == len(topSongPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TopSong{}
	if err = randomize.Struct(seed, o, topSongDBTypes, true, topSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopSong struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TopSongs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, topSongDBTypes, true, topSongPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TopSong struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTopSongsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(topSongAllColumns) == len(topSongPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TopSong{}
	if err = randomize.Struct(seed, o, topSongDBTypes, true, topSongColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopSong struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TopSongs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, topSongDBTypes, true, topSongPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TopSong struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(topSongAllColumns, topSongPrimaryKeyColumns) {
		fields = topSongAllColumns
	} else {
		fields = strmangle.SetComplement(
			topSongAllColumns,
			topSongPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TopSongSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTopSongsUpsert(t *testing.T) {
	t.Parallel()

	if len(topSongAllColumns) == len(topSongPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := TopSong{}
	if err = randomize.Struct(seed, &o, topSongDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TopSong struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TopSong: %s", err)
	}

	count, err := TopSongs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, topSongDBTypes, false, topSongPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TopSong struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TopSong: %s", err)
	}

	count, err = TopSongs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
