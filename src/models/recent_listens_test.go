// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRecentListens(t *testing.T) {
	t.Parallel()

	query := RecentListens()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRecentListensDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecentListen{}
	if err = randomize.Struct(seed, o, recentListenDBTypes, true, recentListenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecentListen struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RecentListens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRecentListensQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecentListen{}
	if err = randomize.Struct(seed, o, recentListenDBTypes, true, recentListenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecentListen struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := RecentListens().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RecentListens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRecentListensSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecentListen{}
	if err = randomize.Struct(seed, o, recentListenDBTypes, true, recentListenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecentListen struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RecentListenSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RecentListens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRecentListensExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecentListen{}
	if err = randomize.Struct(seed, o, recentListenDBTypes, true, recentListenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecentListen struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RecentListenExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if RecentListen exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RecentListenExists to return true, but got false.")
	}
}

func testRecentListensFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecentListen{}
	if err = randomize.Struct(seed, o, recentListenDBTypes, true, recentListenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecentListen struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	recentListenFound, err := FindRecentListen(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if recentListenFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRecentListensBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecentListen{}
	if err = randomize.Struct(seed, o, recentListenDBTypes, true, recentListenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecentListen struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = RecentListens().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRecentListensOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecentListen{}
	if err = randomize.Struct(seed, o, recentListenDBTypes, true, recentListenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecentListen struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := RecentListens().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRecentListensAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	recentListenOne := &RecentListen{}
	recentListenTwo := &RecentListen{}
	if err = randomize.Struct(seed, recentListenOne, recentListenDBTypes, false, recentListenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecentListen struct: %s", err)
	}
	if err = randomize.Struct(seed, recentListenTwo, recentListenDBTypes, false, recentListenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecentListen struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = recentListenOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = recentListenTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RecentListens().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRecentListensCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	recentListenOne := &RecentListen{}
	recentListenTwo := &RecentListen{}
	if err = randomize.Struct(seed, recentListenOne, recentListenDBTypes, false, recentListenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecentListen struct: %s", err)
	}
	if err = randomize.Struct(seed, recentListenTwo, recentListenDBTypes, false, recentListenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecentListen struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = recentListenOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = recentListenTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RecentListens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func recentListenBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *RecentListen) error {
	*o = RecentListen{}
	return nil
}

func recentListenAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *RecentListen) error {
	*o = RecentListen{}
	return nil
}

func recentListenAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *RecentListen) error {
	*o = RecentListen{}
	return nil
}

func recentListenBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RecentListen) error {
	*o = RecentListen{}
	return nil
}

func recentListenAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RecentListen) error {
	*o = RecentListen{}
	return nil
}

func recentListenBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RecentListen) error {
	*o = RecentListen{}
	return nil
}

func recentListenAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RecentListen) error {
	*o = RecentListen{}
	return nil
}

func recentListenBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RecentListen) error {
	*o = RecentListen{}
	return nil
}

func recentListenAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RecentListen) error {
	*o = RecentListen{}
	return nil
}

func testRecentListensHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &RecentListen{}
	o := &RecentListen{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, recentListenDBTypes, false); err != nil {
		t.Errorf("Unable to randomize RecentListen object: %s", err)
	}

	AddRecentListenHook(boil.BeforeInsertHook, recentListenBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	recentListenBeforeInsertHooks = []RecentListenHook{}

	AddRecentListenHook(boil.AfterInsertHook, recentListenAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	recentListenAfterInsertHooks = []RecentListenHook{}

	AddRecentListenHook(boil.AfterSelectHook, recentListenAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	recentListenAfterSelectHooks = []RecentListenHook{}

	AddRecentListenHook(boil.BeforeUpdateHook, recentListenBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	recentListenBeforeUpdateHooks = []RecentListenHook{}

	AddRecentListenHook(boil.AfterUpdateHook, recentListenAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	recentListenAfterUpdateHooks = []RecentListenHook{}

	AddRecentListenHook(boil.BeforeDeleteHook, recentListenBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	recentListenBeforeDeleteHooks = []RecentListenHook{}

	AddRecentListenHook(boil.AfterDeleteHook, recentListenAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	recentListenAfterDeleteHooks = []RecentListenHook{}

	AddRecentListenHook(boil.BeforeUpsertHook, recentListenBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	recentListenBeforeUpsertHooks = []RecentListenHook{}

	AddRecentListenHook(boil.AfterUpsertHook, recentListenAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	recentListenAfterUpsertHooks = []RecentListenHook{}
}

func testRecentListensInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecentListen{}
	if err = randomize.Struct(seed, o, recentListenDBTypes, true, recentListenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecentListen struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RecentListens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRecentListensInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecentListen{}
	if err = randomize.Struct(seed, o, recentListenDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RecentListen struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(recentListenColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := RecentListens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRecentListensReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecentListen{}
	if err = randomize.Struct(seed, o, recentListenDBTypes, true, recentListenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecentListen struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRecentListensReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecentListen{}
	if err = randomize.Struct(seed, o, recentListenDBTypes, true, recentListenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecentListen struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RecentListenSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRecentListensSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecentListen{}
	if err = randomize.Struct(seed, o, recentListenDBTypes, true, recentListenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecentListen struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RecentListens().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	recentListenDBTypes = map[string]string{`ID`: `text`, `UserID`: `text`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`}
	_                   = bytes.MinRead
)

func testRecentListensUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(recentListenPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(recentListenAllColumns) == len(recentListenPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RecentListen{}
	if err = randomize.Struct(seed, o, recentListenDBTypes, true, recentListenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecentListen struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RecentListens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, recentListenDBTypes, true, recentListenPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RecentListen struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRecentListensSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(recentListenAllColumns) == len(recentListenPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RecentListen{}
	if err = randomize.Struct(seed, o, recentListenDBTypes, true, recentListenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecentListen struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RecentListens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, recentListenDBTypes, true, recentListenPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RecentListen struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(recentListenAllColumns, recentListenPrimaryKeyColumns) {
		fields = recentListenAllColumns
	} else {
		fields = strmangle.SetComplement(
			recentListenAllColumns,
			recentListenPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RecentListenSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRecentListensUpsert(t *testing.T) {
	t.Parallel()

	if len(recentListenAllColumns) == len(recentListenPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := RecentListen{}
	if err = randomize.Struct(seed, &o, recentListenDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RecentListen struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RecentListen: %s", err)
	}

	count, err := RecentListens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, recentListenDBTypes, false, recentListenPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RecentListen struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RecentListen: %s", err)
	}

	count, err = RecentListens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
