// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTopArtistData(t *testing.T) {
	t.Parallel()

	query := TopArtistData()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTopArtistDataDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopArtistDatum{}
	if err = randomize.Struct(seed, o, topArtistDatumDBTypes, true, topArtistDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopArtistDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TopArtistData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTopArtistDataQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopArtistDatum{}
	if err = randomize.Struct(seed, o, topArtistDatumDBTypes, true, topArtistDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopArtistDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := TopArtistData().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TopArtistData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTopArtistDataSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopArtistDatum{}
	if err = randomize.Struct(seed, o, topArtistDatumDBTypes, true, topArtistDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopArtistDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TopArtistDatumSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TopArtistData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTopArtistDataExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopArtistDatum{}
	if err = randomize.Struct(seed, o, topArtistDatumDBTypes, true, topArtistDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopArtistDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TopArtistDatumExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if TopArtistDatum exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TopArtistDatumExists to return true, but got false.")
	}
}

func testTopArtistDataFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopArtistDatum{}
	if err = randomize.Struct(seed, o, topArtistDatumDBTypes, true, topArtistDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopArtistDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	topArtistDatumFound, err := FindTopArtistDatum(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if topArtistDatumFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTopArtistDataBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopArtistDatum{}
	if err = randomize.Struct(seed, o, topArtistDatumDBTypes, true, topArtistDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopArtistDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = TopArtistData().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTopArtistDataOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopArtistDatum{}
	if err = randomize.Struct(seed, o, topArtistDatumDBTypes, true, topArtistDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopArtistDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := TopArtistData().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTopArtistDataAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	topArtistDatumOne := &TopArtistDatum{}
	topArtistDatumTwo := &TopArtistDatum{}
	if err = randomize.Struct(seed, topArtistDatumOne, topArtistDatumDBTypes, false, topArtistDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopArtistDatum struct: %s", err)
	}
	if err = randomize.Struct(seed, topArtistDatumTwo, topArtistDatumDBTypes, false, topArtistDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopArtistDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = topArtistDatumOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = topArtistDatumTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TopArtistData().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTopArtistDataCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	topArtistDatumOne := &TopArtistDatum{}
	topArtistDatumTwo := &TopArtistDatum{}
	if err = randomize.Struct(seed, topArtistDatumOne, topArtistDatumDBTypes, false, topArtistDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopArtistDatum struct: %s", err)
	}
	if err = randomize.Struct(seed, topArtistDatumTwo, topArtistDatumDBTypes, false, topArtistDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopArtistDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = topArtistDatumOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = topArtistDatumTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TopArtistData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func topArtistDatumBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *TopArtistDatum) error {
	*o = TopArtistDatum{}
	return nil
}

func topArtistDatumAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *TopArtistDatum) error {
	*o = TopArtistDatum{}
	return nil
}

func topArtistDatumAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *TopArtistDatum) error {
	*o = TopArtistDatum{}
	return nil
}

func topArtistDatumBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TopArtistDatum) error {
	*o = TopArtistDatum{}
	return nil
}

func topArtistDatumAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TopArtistDatum) error {
	*o = TopArtistDatum{}
	return nil
}

func topArtistDatumBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TopArtistDatum) error {
	*o = TopArtistDatum{}
	return nil
}

func topArtistDatumAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TopArtistDatum) error {
	*o = TopArtistDatum{}
	return nil
}

func topArtistDatumBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TopArtistDatum) error {
	*o = TopArtistDatum{}
	return nil
}

func topArtistDatumAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TopArtistDatum) error {
	*o = TopArtistDatum{}
	return nil
}

func testTopArtistDataHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &TopArtistDatum{}
	o := &TopArtistDatum{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, topArtistDatumDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TopArtistDatum object: %s", err)
	}

	AddTopArtistDatumHook(boil.BeforeInsertHook, topArtistDatumBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	topArtistDatumBeforeInsertHooks = []TopArtistDatumHook{}

	AddTopArtistDatumHook(boil.AfterInsertHook, topArtistDatumAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	topArtistDatumAfterInsertHooks = []TopArtistDatumHook{}

	AddTopArtistDatumHook(boil.AfterSelectHook, topArtistDatumAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	topArtistDatumAfterSelectHooks = []TopArtistDatumHook{}

	AddTopArtistDatumHook(boil.BeforeUpdateHook, topArtistDatumBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	topArtistDatumBeforeUpdateHooks = []TopArtistDatumHook{}

	AddTopArtistDatumHook(boil.AfterUpdateHook, topArtistDatumAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	topArtistDatumAfterUpdateHooks = []TopArtistDatumHook{}

	AddTopArtistDatumHook(boil.BeforeDeleteHook, topArtistDatumBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	topArtistDatumBeforeDeleteHooks = []TopArtistDatumHook{}

	AddTopArtistDatumHook(boil.AfterDeleteHook, topArtistDatumAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	topArtistDatumAfterDeleteHooks = []TopArtistDatumHook{}

	AddTopArtistDatumHook(boil.BeforeUpsertHook, topArtistDatumBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	topArtistDatumBeforeUpsertHooks = []TopArtistDatumHook{}

	AddTopArtistDatumHook(boil.AfterUpsertHook, topArtistDatumAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	topArtistDatumAfterUpsertHooks = []TopArtistDatumHook{}
}

func testTopArtistDataInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopArtistDatum{}
	if err = randomize.Struct(seed, o, topArtistDatumDBTypes, true, topArtistDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopArtistDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TopArtistData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTopArtistDataInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopArtistDatum{}
	if err = randomize.Struct(seed, o, topArtistDatumDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TopArtistDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(topArtistDatumColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := TopArtistData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTopArtistDataReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopArtistDatum{}
	if err = randomize.Struct(seed, o, topArtistDatumDBTypes, true, topArtistDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopArtistDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTopArtistDataReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopArtistDatum{}
	if err = randomize.Struct(seed, o, topArtistDatumDBTypes, true, topArtistDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopArtistDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TopArtistDatumSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTopArtistDataSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopArtistDatum{}
	if err = randomize.Struct(seed, o, topArtistDatumDBTypes, true, topArtistDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopArtistDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TopArtistData().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	topArtistDatumDBTypes = map[string]string{`ID`: `text`, `ArtistID`: `text`, `TopArtistID`: `text`, `TimePeriod`: `text`, `Order`: `integer`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`}
	_                     = bytes.MinRead
)

func testTopArtistDataUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(topArtistDatumPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(topArtistDatumAllColumns) == len(topArtistDatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TopArtistDatum{}
	if err = randomize.Struct(seed, o, topArtistDatumDBTypes, true, topArtistDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopArtistDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TopArtistData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, topArtistDatumDBTypes, true, topArtistDatumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TopArtistDatum struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTopArtistDataSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(topArtistDatumAllColumns) == len(topArtistDatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TopArtistDatum{}
	if err = randomize.Struct(seed, o, topArtistDatumDBTypes, true, topArtistDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopArtistDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TopArtistData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, topArtistDatumDBTypes, true, topArtistDatumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TopArtistDatum struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(topArtistDatumAllColumns, topArtistDatumPrimaryKeyColumns) {
		fields = topArtistDatumAllColumns
	} else {
		fields = strmangle.SetComplement(
			topArtistDatumAllColumns,
			topArtistDatumPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TopArtistDatumSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTopArtistDataUpsert(t *testing.T) {
	t.Parallel()

	if len(topArtistDatumAllColumns) == len(topArtistDatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := TopArtistDatum{}
	if err = randomize.Struct(seed, &o, topArtistDatumDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TopArtistDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TopArtistDatum: %s", err)
	}

	count, err := TopArtistData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, topArtistDatumDBTypes, false, topArtistDatumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TopArtistDatum struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TopArtistDatum: %s", err)
	}

	count, err = TopArtistData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
