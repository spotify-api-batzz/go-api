// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// RecentListenDatum is an object representing the database table.
type RecentListenDatum struct {
	ID             string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	SongID         null.String `boil:"song_id" json:"song_id,omitempty" toml:"song_id" yaml:"song_id,omitempty"`
	RecentListenID null.String `boil:"recent_listen_id" json:"recent_listen_id,omitempty" toml:"recent_listen_id" yaml:"recent_listen_id,omitempty"`
	PlayedAt       null.Time   `boil:"played_at" json:"played_at,omitempty" toml:"played_at" yaml:"played_at,omitempty"`
	CreatedAt      null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt      null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *recentListenDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L recentListenDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RecentListenDatumColumns = struct {
	ID             string
	SongID         string
	RecentListenID string
	PlayedAt       string
	CreatedAt      string
	UpdatedAt      string
}{
	ID:             "id",
	SongID:         "song_id",
	RecentListenID: "recent_listen_id",
	PlayedAt:       "played_at",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
}

// Generated where

var RecentListenDatumWhere = struct {
	ID             whereHelperstring
	SongID         whereHelpernull_String
	RecentListenID whereHelpernull_String
	PlayedAt       whereHelpernull_Time
	CreatedAt      whereHelpernull_Time
	UpdatedAt      whereHelpernull_Time
}{
	ID:             whereHelperstring{field: "\"recent_listen_data\".\"id\""},
	SongID:         whereHelpernull_String{field: "\"recent_listen_data\".\"song_id\""},
	RecentListenID: whereHelpernull_String{field: "\"recent_listen_data\".\"recent_listen_id\""},
	PlayedAt:       whereHelpernull_Time{field: "\"recent_listen_data\".\"played_at\""},
	CreatedAt:      whereHelpernull_Time{field: "\"recent_listen_data\".\"created_at\""},
	UpdatedAt:      whereHelpernull_Time{field: "\"recent_listen_data\".\"updated_at\""},
}

// RecentListenDatumRels is where relationship names are stored.
var RecentListenDatumRels = struct {
}{}

// recentListenDatumR is where relationships are stored.
type recentListenDatumR struct {
}

// NewStruct creates a new relationship struct
func (*recentListenDatumR) NewStruct() *recentListenDatumR {
	return &recentListenDatumR{}
}

// recentListenDatumL is where Load methods for each relationship are stored.
type recentListenDatumL struct{}

var (
	recentListenDatumAllColumns            = []string{"id", "song_id", "recent_listen_id", "played_at", "created_at", "updated_at"}
	recentListenDatumColumnsWithoutDefault = []string{"id", "song_id", "recent_listen_id", "played_at", "created_at", "updated_at"}
	recentListenDatumColumnsWithDefault    = []string{}
	recentListenDatumPrimaryKeyColumns     = []string{"id"}
)

type (
	// RecentListenDatumSlice is an alias for a slice of pointers to RecentListenDatum.
	// This should generally be used opposed to []RecentListenDatum.
	RecentListenDatumSlice []*RecentListenDatum
	// RecentListenDatumHook is the signature for custom RecentListenDatum hook methods
	RecentListenDatumHook func(context.Context, boil.ContextExecutor, *RecentListenDatum) error

	recentListenDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	recentListenDatumType                 = reflect.TypeOf(&RecentListenDatum{})
	recentListenDatumMapping              = queries.MakeStructMapping(recentListenDatumType)
	recentListenDatumPrimaryKeyMapping, _ = queries.BindMapping(recentListenDatumType, recentListenDatumMapping, recentListenDatumPrimaryKeyColumns)
	recentListenDatumInsertCacheMut       sync.RWMutex
	recentListenDatumInsertCache          = make(map[string]insertCache)
	recentListenDatumUpdateCacheMut       sync.RWMutex
	recentListenDatumUpdateCache          = make(map[string]updateCache)
	recentListenDatumUpsertCacheMut       sync.RWMutex
	recentListenDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var recentListenDatumBeforeInsertHooks []RecentListenDatumHook
var recentListenDatumBeforeUpdateHooks []RecentListenDatumHook
var recentListenDatumBeforeDeleteHooks []RecentListenDatumHook
var recentListenDatumBeforeUpsertHooks []RecentListenDatumHook

var recentListenDatumAfterInsertHooks []RecentListenDatumHook
var recentListenDatumAfterSelectHooks []RecentListenDatumHook
var recentListenDatumAfterUpdateHooks []RecentListenDatumHook
var recentListenDatumAfterDeleteHooks []RecentListenDatumHook
var recentListenDatumAfterUpsertHooks []RecentListenDatumHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RecentListenDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recentListenDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RecentListenDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recentListenDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RecentListenDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recentListenDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RecentListenDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recentListenDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RecentListenDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recentListenDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RecentListenDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recentListenDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RecentListenDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recentListenDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RecentListenDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recentListenDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RecentListenDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recentListenDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRecentListenDatumHook registers your hook function for all future operations.
func AddRecentListenDatumHook(hookPoint boil.HookPoint, recentListenDatumHook RecentListenDatumHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		recentListenDatumBeforeInsertHooks = append(recentListenDatumBeforeInsertHooks, recentListenDatumHook)
	case boil.BeforeUpdateHook:
		recentListenDatumBeforeUpdateHooks = append(recentListenDatumBeforeUpdateHooks, recentListenDatumHook)
	case boil.BeforeDeleteHook:
		recentListenDatumBeforeDeleteHooks = append(recentListenDatumBeforeDeleteHooks, recentListenDatumHook)
	case boil.BeforeUpsertHook:
		recentListenDatumBeforeUpsertHooks = append(recentListenDatumBeforeUpsertHooks, recentListenDatumHook)
	case boil.AfterInsertHook:
		recentListenDatumAfterInsertHooks = append(recentListenDatumAfterInsertHooks, recentListenDatumHook)
	case boil.AfterSelectHook:
		recentListenDatumAfterSelectHooks = append(recentListenDatumAfterSelectHooks, recentListenDatumHook)
	case boil.AfterUpdateHook:
		recentListenDatumAfterUpdateHooks = append(recentListenDatumAfterUpdateHooks, recentListenDatumHook)
	case boil.AfterDeleteHook:
		recentListenDatumAfterDeleteHooks = append(recentListenDatumAfterDeleteHooks, recentListenDatumHook)
	case boil.AfterUpsertHook:
		recentListenDatumAfterUpsertHooks = append(recentListenDatumAfterUpsertHooks, recentListenDatumHook)
	}
}

// One returns a single recentListenDatum record from the query.
func (q recentListenDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RecentListenDatum, error) {
	o := &RecentListenDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for recent_listen_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RecentListenDatum records from the query.
func (q recentListenDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (RecentListenDatumSlice, error) {
	var o []*RecentListenDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RecentListenDatum slice")
	}

	if len(recentListenDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RecentListenDatum records in the query.
func (q recentListenDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count recent_listen_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q recentListenDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if recent_listen_data exists")
	}

	return count > 0, nil
}

// RecentListenData retrieves all the records using an executor.
func RecentListenData(mods ...qm.QueryMod) recentListenDatumQuery {
	mods = append(mods, qm.From("\"recent_listen_data\""))
	return recentListenDatumQuery{NewQuery(mods...)}
}

// FindRecentListenDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRecentListenDatum(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*RecentListenDatum, error) {
	recentListenDatumObj := &RecentListenDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"recent_listen_data\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, recentListenDatumObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from recent_listen_data")
	}

	return recentListenDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RecentListenDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no recent_listen_data provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(recentListenDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	recentListenDatumInsertCacheMut.RLock()
	cache, cached := recentListenDatumInsertCache[key]
	recentListenDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			recentListenDatumAllColumns,
			recentListenDatumColumnsWithDefault,
			recentListenDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(recentListenDatumType, recentListenDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(recentListenDatumType, recentListenDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"recent_listen_data\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"recent_listen_data\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into recent_listen_data")
	}

	if !cached {
		recentListenDatumInsertCacheMut.Lock()
		recentListenDatumInsertCache[key] = cache
		recentListenDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the RecentListenDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RecentListenDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	recentListenDatumUpdateCacheMut.RLock()
	cache, cached := recentListenDatumUpdateCache[key]
	recentListenDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			recentListenDatumAllColumns,
			recentListenDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update recent_listen_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"recent_listen_data\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, recentListenDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(recentListenDatumType, recentListenDatumMapping, append(wl, recentListenDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update recent_listen_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for recent_listen_data")
	}

	if !cached {
		recentListenDatumUpdateCacheMut.Lock()
		recentListenDatumUpdateCache[key] = cache
		recentListenDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q recentListenDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for recent_listen_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for recent_listen_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RecentListenDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recentListenDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"recent_listen_data\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, recentListenDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in recentListenDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all recentListenDatum")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RecentListenDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no recent_listen_data provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(recentListenDatumColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	recentListenDatumUpsertCacheMut.RLock()
	cache, cached := recentListenDatumUpsertCache[key]
	recentListenDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			recentListenDatumAllColumns,
			recentListenDatumColumnsWithDefault,
			recentListenDatumColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			recentListenDatumAllColumns,
			recentListenDatumPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert recent_listen_data, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(recentListenDatumPrimaryKeyColumns))
			copy(conflict, recentListenDatumPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"recent_listen_data\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(recentListenDatumType, recentListenDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(recentListenDatumType, recentListenDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert recent_listen_data")
	}

	if !cached {
		recentListenDatumUpsertCacheMut.Lock()
		recentListenDatumUpsertCache[key] = cache
		recentListenDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single RecentListenDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RecentListenDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RecentListenDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), recentListenDatumPrimaryKeyMapping)
	sql := "DELETE FROM \"recent_listen_data\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from recent_listen_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for recent_listen_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q recentListenDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no recentListenDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from recent_listen_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for recent_listen_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RecentListenDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(recentListenDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recentListenDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"recent_listen_data\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, recentListenDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from recentListenDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for recent_listen_data")
	}

	if len(recentListenDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RecentListenDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRecentListenDatum(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RecentListenDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RecentListenDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recentListenDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"recent_listen_data\".* FROM \"recent_listen_data\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, recentListenDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RecentListenDatumSlice")
	}

	*o = slice

	return nil
}

// RecentListenDatumExists checks if the RecentListenDatum row exists.
func RecentListenDatumExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"recent_listen_data\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if recent_listen_data exists")
	}

	return exists, nil
}
