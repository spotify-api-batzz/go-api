// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRecentListenData(t *testing.T) {
	t.Parallel()

	query := RecentListenData()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRecentListenDataDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecentListenDatum{}
	if err = randomize.Struct(seed, o, recentListenDatumDBTypes, true, recentListenDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecentListenDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RecentListenData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRecentListenDataQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecentListenDatum{}
	if err = randomize.Struct(seed, o, recentListenDatumDBTypes, true, recentListenDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecentListenDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := RecentListenData().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RecentListenData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRecentListenDataSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecentListenDatum{}
	if err = randomize.Struct(seed, o, recentListenDatumDBTypes, true, recentListenDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecentListenDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RecentListenDatumSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RecentListenData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRecentListenDataExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecentListenDatum{}
	if err = randomize.Struct(seed, o, recentListenDatumDBTypes, true, recentListenDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecentListenDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RecentListenDatumExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if RecentListenDatum exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RecentListenDatumExists to return true, but got false.")
	}
}

func testRecentListenDataFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecentListenDatum{}
	if err = randomize.Struct(seed, o, recentListenDatumDBTypes, true, recentListenDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecentListenDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	recentListenDatumFound, err := FindRecentListenDatum(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if recentListenDatumFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRecentListenDataBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecentListenDatum{}
	if err = randomize.Struct(seed, o, recentListenDatumDBTypes, true, recentListenDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecentListenDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = RecentListenData().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRecentListenDataOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecentListenDatum{}
	if err = randomize.Struct(seed, o, recentListenDatumDBTypes, true, recentListenDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecentListenDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := RecentListenData().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRecentListenDataAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	recentListenDatumOne := &RecentListenDatum{}
	recentListenDatumTwo := &RecentListenDatum{}
	if err = randomize.Struct(seed, recentListenDatumOne, recentListenDatumDBTypes, false, recentListenDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecentListenDatum struct: %s", err)
	}
	if err = randomize.Struct(seed, recentListenDatumTwo, recentListenDatumDBTypes, false, recentListenDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecentListenDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = recentListenDatumOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = recentListenDatumTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RecentListenData().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRecentListenDataCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	recentListenDatumOne := &RecentListenDatum{}
	recentListenDatumTwo := &RecentListenDatum{}
	if err = randomize.Struct(seed, recentListenDatumOne, recentListenDatumDBTypes, false, recentListenDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecentListenDatum struct: %s", err)
	}
	if err = randomize.Struct(seed, recentListenDatumTwo, recentListenDatumDBTypes, false, recentListenDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecentListenDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = recentListenDatumOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = recentListenDatumTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RecentListenData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func recentListenDatumBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *RecentListenDatum) error {
	*o = RecentListenDatum{}
	return nil
}

func recentListenDatumAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *RecentListenDatum) error {
	*o = RecentListenDatum{}
	return nil
}

func recentListenDatumAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *RecentListenDatum) error {
	*o = RecentListenDatum{}
	return nil
}

func recentListenDatumBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RecentListenDatum) error {
	*o = RecentListenDatum{}
	return nil
}

func recentListenDatumAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RecentListenDatum) error {
	*o = RecentListenDatum{}
	return nil
}

func recentListenDatumBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RecentListenDatum) error {
	*o = RecentListenDatum{}
	return nil
}

func recentListenDatumAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RecentListenDatum) error {
	*o = RecentListenDatum{}
	return nil
}

func recentListenDatumBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RecentListenDatum) error {
	*o = RecentListenDatum{}
	return nil
}

func recentListenDatumAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RecentListenDatum) error {
	*o = RecentListenDatum{}
	return nil
}

func testRecentListenDataHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &RecentListenDatum{}
	o := &RecentListenDatum{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, recentListenDatumDBTypes, false); err != nil {
		t.Errorf("Unable to randomize RecentListenDatum object: %s", err)
	}

	AddRecentListenDatumHook(boil.BeforeInsertHook, recentListenDatumBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	recentListenDatumBeforeInsertHooks = []RecentListenDatumHook{}

	AddRecentListenDatumHook(boil.AfterInsertHook, recentListenDatumAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	recentListenDatumAfterInsertHooks = []RecentListenDatumHook{}

	AddRecentListenDatumHook(boil.AfterSelectHook, recentListenDatumAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	recentListenDatumAfterSelectHooks = []RecentListenDatumHook{}

	AddRecentListenDatumHook(boil.BeforeUpdateHook, recentListenDatumBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	recentListenDatumBeforeUpdateHooks = []RecentListenDatumHook{}

	AddRecentListenDatumHook(boil.AfterUpdateHook, recentListenDatumAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	recentListenDatumAfterUpdateHooks = []RecentListenDatumHook{}

	AddRecentListenDatumHook(boil.BeforeDeleteHook, recentListenDatumBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	recentListenDatumBeforeDeleteHooks = []RecentListenDatumHook{}

	AddRecentListenDatumHook(boil.AfterDeleteHook, recentListenDatumAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	recentListenDatumAfterDeleteHooks = []RecentListenDatumHook{}

	AddRecentListenDatumHook(boil.BeforeUpsertHook, recentListenDatumBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	recentListenDatumBeforeUpsertHooks = []RecentListenDatumHook{}

	AddRecentListenDatumHook(boil.AfterUpsertHook, recentListenDatumAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	recentListenDatumAfterUpsertHooks = []RecentListenDatumHook{}
}

func testRecentListenDataInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecentListenDatum{}
	if err = randomize.Struct(seed, o, recentListenDatumDBTypes, true, recentListenDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecentListenDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RecentListenData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRecentListenDataInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecentListenDatum{}
	if err = randomize.Struct(seed, o, recentListenDatumDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RecentListenDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(recentListenDatumColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := RecentListenData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRecentListenDataReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecentListenDatum{}
	if err = randomize.Struct(seed, o, recentListenDatumDBTypes, true, recentListenDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecentListenDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRecentListenDataReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecentListenDatum{}
	if err = randomize.Struct(seed, o, recentListenDatumDBTypes, true, recentListenDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecentListenDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RecentListenDatumSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRecentListenDataSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecentListenDatum{}
	if err = randomize.Struct(seed, o, recentListenDatumDBTypes, true, recentListenDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecentListenDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RecentListenData().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	recentListenDatumDBTypes = map[string]string{`ID`: `text`, `SongID`: `text`, `RecentListenID`: `text`, `PlayedAt`: `timestamp without time zone`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`}
	_                        = bytes.MinRead
)

func testRecentListenDataUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(recentListenDatumPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(recentListenDatumAllColumns) == len(recentListenDatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RecentListenDatum{}
	if err = randomize.Struct(seed, o, recentListenDatumDBTypes, true, recentListenDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecentListenDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RecentListenData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, recentListenDatumDBTypes, true, recentListenDatumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RecentListenDatum struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRecentListenDataSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(recentListenDatumAllColumns) == len(recentListenDatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RecentListenDatum{}
	if err = randomize.Struct(seed, o, recentListenDatumDBTypes, true, recentListenDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecentListenDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RecentListenData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, recentListenDatumDBTypes, true, recentListenDatumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RecentListenDatum struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(recentListenDatumAllColumns, recentListenDatumPrimaryKeyColumns) {
		fields = recentListenDatumAllColumns
	} else {
		fields = strmangle.SetComplement(
			recentListenDatumAllColumns,
			recentListenDatumPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RecentListenDatumSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRecentListenDataUpsert(t *testing.T) {
	t.Parallel()

	if len(recentListenDatumAllColumns) == len(recentListenDatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := RecentListenDatum{}
	if err = randomize.Struct(seed, &o, recentListenDatumDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RecentListenDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RecentListenDatum: %s", err)
	}

	count, err := RecentListenData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, recentListenDatumDBTypes, false, recentListenDatumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RecentListenDatum struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RecentListenDatum: %s", err)
	}

	count, err = RecentListenData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
