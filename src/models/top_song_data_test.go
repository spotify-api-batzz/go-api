// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTopSongData(t *testing.T) {
	t.Parallel()

	query := TopSongData()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTopSongDataDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopSongDatum{}
	if err = randomize.Struct(seed, o, topSongDatumDBTypes, true, topSongDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopSongDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TopSongData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTopSongDataQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopSongDatum{}
	if err = randomize.Struct(seed, o, topSongDatumDBTypes, true, topSongDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopSongDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := TopSongData().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TopSongData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTopSongDataSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopSongDatum{}
	if err = randomize.Struct(seed, o, topSongDatumDBTypes, true, topSongDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopSongDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TopSongDatumSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TopSongData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTopSongDataExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopSongDatum{}
	if err = randomize.Struct(seed, o, topSongDatumDBTypes, true, topSongDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopSongDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TopSongDatumExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if TopSongDatum exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TopSongDatumExists to return true, but got false.")
	}
}

func testTopSongDataFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopSongDatum{}
	if err = randomize.Struct(seed, o, topSongDatumDBTypes, true, topSongDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopSongDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	topSongDatumFound, err := FindTopSongDatum(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if topSongDatumFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTopSongDataBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopSongDatum{}
	if err = randomize.Struct(seed, o, topSongDatumDBTypes, true, topSongDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopSongDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = TopSongData().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTopSongDataOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopSongDatum{}
	if err = randomize.Struct(seed, o, topSongDatumDBTypes, true, topSongDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopSongDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := TopSongData().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTopSongDataAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	topSongDatumOne := &TopSongDatum{}
	topSongDatumTwo := &TopSongDatum{}
	if err = randomize.Struct(seed, topSongDatumOne, topSongDatumDBTypes, false, topSongDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopSongDatum struct: %s", err)
	}
	if err = randomize.Struct(seed, topSongDatumTwo, topSongDatumDBTypes, false, topSongDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopSongDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = topSongDatumOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = topSongDatumTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TopSongData().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTopSongDataCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	topSongDatumOne := &TopSongDatum{}
	topSongDatumTwo := &TopSongDatum{}
	if err = randomize.Struct(seed, topSongDatumOne, topSongDatumDBTypes, false, topSongDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopSongDatum struct: %s", err)
	}
	if err = randomize.Struct(seed, topSongDatumTwo, topSongDatumDBTypes, false, topSongDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopSongDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = topSongDatumOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = topSongDatumTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TopSongData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func topSongDatumBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *TopSongDatum) error {
	*o = TopSongDatum{}
	return nil
}

func topSongDatumAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *TopSongDatum) error {
	*o = TopSongDatum{}
	return nil
}

func topSongDatumAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *TopSongDatum) error {
	*o = TopSongDatum{}
	return nil
}

func topSongDatumBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TopSongDatum) error {
	*o = TopSongDatum{}
	return nil
}

func topSongDatumAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TopSongDatum) error {
	*o = TopSongDatum{}
	return nil
}

func topSongDatumBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TopSongDatum) error {
	*o = TopSongDatum{}
	return nil
}

func topSongDatumAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TopSongDatum) error {
	*o = TopSongDatum{}
	return nil
}

func topSongDatumBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TopSongDatum) error {
	*o = TopSongDatum{}
	return nil
}

func topSongDatumAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TopSongDatum) error {
	*o = TopSongDatum{}
	return nil
}

func testTopSongDataHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &TopSongDatum{}
	o := &TopSongDatum{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, topSongDatumDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TopSongDatum object: %s", err)
	}

	AddTopSongDatumHook(boil.BeforeInsertHook, topSongDatumBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	topSongDatumBeforeInsertHooks = []TopSongDatumHook{}

	AddTopSongDatumHook(boil.AfterInsertHook, topSongDatumAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	topSongDatumAfterInsertHooks = []TopSongDatumHook{}

	AddTopSongDatumHook(boil.AfterSelectHook, topSongDatumAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	topSongDatumAfterSelectHooks = []TopSongDatumHook{}

	AddTopSongDatumHook(boil.BeforeUpdateHook, topSongDatumBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	topSongDatumBeforeUpdateHooks = []TopSongDatumHook{}

	AddTopSongDatumHook(boil.AfterUpdateHook, topSongDatumAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	topSongDatumAfterUpdateHooks = []TopSongDatumHook{}

	AddTopSongDatumHook(boil.BeforeDeleteHook, topSongDatumBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	topSongDatumBeforeDeleteHooks = []TopSongDatumHook{}

	AddTopSongDatumHook(boil.AfterDeleteHook, topSongDatumAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	topSongDatumAfterDeleteHooks = []TopSongDatumHook{}

	AddTopSongDatumHook(boil.BeforeUpsertHook, topSongDatumBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	topSongDatumBeforeUpsertHooks = []TopSongDatumHook{}

	AddTopSongDatumHook(boil.AfterUpsertHook, topSongDatumAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	topSongDatumAfterUpsertHooks = []TopSongDatumHook{}
}

func testTopSongDataInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopSongDatum{}
	if err = randomize.Struct(seed, o, topSongDatumDBTypes, true, topSongDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopSongDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TopSongData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTopSongDataInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopSongDatum{}
	if err = randomize.Struct(seed, o, topSongDatumDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TopSongDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(topSongDatumColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := TopSongData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTopSongDataReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopSongDatum{}
	if err = randomize.Struct(seed, o, topSongDatumDBTypes, true, topSongDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopSongDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTopSongDataReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopSongDatum{}
	if err = randomize.Struct(seed, o, topSongDatumDBTypes, true, topSongDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopSongDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TopSongDatumSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTopSongDataSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopSongDatum{}
	if err = randomize.Struct(seed, o, topSongDatumDBTypes, true, topSongDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopSongDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TopSongData().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	topSongDatumDBTypes = map[string]string{`ID`: `text`, `SongID`: `text`, `TopSongID`: `text`, `Order`: `integer`, `TimePeriod`: `text`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`}
	_                   = bytes.MinRead
)

func testTopSongDataUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(topSongDatumPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(topSongDatumAllColumns) == len(topSongDatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TopSongDatum{}
	if err = randomize.Struct(seed, o, topSongDatumDBTypes, true, topSongDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopSongDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TopSongData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, topSongDatumDBTypes, true, topSongDatumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TopSongDatum struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTopSongDataSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(topSongDatumAllColumns) == len(topSongDatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TopSongDatum{}
	if err = randomize.Struct(seed, o, topSongDatumDBTypes, true, topSongDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopSongDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TopSongData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, topSongDatumDBTypes, true, topSongDatumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TopSongDatum struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(topSongDatumAllColumns, topSongDatumPrimaryKeyColumns) {
		fields = topSongDatumAllColumns
	} else {
		fields = strmangle.SetComplement(
			topSongDatumAllColumns,
			topSongDatumPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TopSongDatumSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTopSongDataUpsert(t *testing.T) {
	t.Parallel()

	if len(topSongDatumAllColumns) == len(topSongDatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := TopSongDatum{}
	if err = randomize.Struct(seed, &o, topSongDatumDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TopSongDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TopSongDatum: %s", err)
	}

	count, err := TopSongData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, topSongDatumDBTypes, false, topSongDatumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TopSongDatum struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TopSongDatum: %s", err)
	}

	count, err = TopSongData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
